-- USUWANIE POZOSTAŁOŚCI PO POPRZEDNIM WYKONANIU
DROP TABLE ROLE_PRIVILEGE CASCADE CONSTRAINTS;
DROP TABLE PRIVILEGE CASCADE CONSTRAINTS;
DROP TABLE USERS CASCADE CONSTRAINTS;
DROP TABLE BOOK CASCADE CONSTRAINTS;
DROP TABLE ROLE CASCADE CONSTRAINTS;
DROP TABLE REVIEWS CASCADE CONSTRAINTS;
DROP TABLE AUTHOR CASCADE CONSTRAINTS;
DROP TABLE CATEGORY CASCADE CONSTRAINTS;
DROP TABLE USERS_ARCHIVE CASCADE CONSTRAINTS;
DROP TABLE BOOK_ARCHIVE CASCADE CONSTRAINTS;
DROP TABLE AUTHOR_ARCHIVE CASCADE CONSTRAINTS;
DROP TABLE LOGS CASCADE CONSTRAINTS;

-- 1. PRZYGOTOWANIE ODPOWIEDNIEJ STRUKTURY BAZY DANYCH NA WYBRANY TEMAT
-- TABELE GLOWNE
CREATE TABLE CATEGORY
(
    CATEGORY_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NAME        VARCHAR2(30) NOT NULL
);


CREATE TABLE AUTHOR
(
    AUTHOR_ID   INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    FIRST_NAME  VARCHAR2(30) NOT NULL,
    LAST_NAME   VARCHAR2(30) NOT NULL,
    RATING      INT,
    VOTES       INT,
    WEBSITE     VARCHAR2(30),
    CATEGORY_ID INT,
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (CATEGORY_ID)
);


CREATE TABLE BOOK
(
    BOOK_ID         INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    TITLE           VARCHAR2(50) NOT NULL,
    ISBN            VARCHAR2(30) NOT NULL,
    PAGE_COUNT      INT,
    LANGUAGE        VARCHAR2(10),
    PUBLISHER       VARCHAR2(30),
    PUBLISHING_DATE DATE,
    RATING          INT,
    VOTES           INT,
    CATEGORY_ID     INT,
    AUTHOR_ID       INT,
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (CATEGORY_ID),
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR (AUTHOR_ID)
);

CREATE TABLE ROLE
(
    ROLE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NAME    VARCHAR2(30) NOT NULL
);

CREATE TABLE PRIVILEGE
(
    PRIVILEGE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NAME         VARCHAR2(30) NOT NULL,
    DESCRIPTION  VARCHAR2(30) NOT NULL
);

CREATE TABLE ROLE_PRIVILEGE
(
    ROLE_PRIVILEGE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    ROLE_ID           INT,
    PRIVILEGE_ID      INT,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID),
    FOREIGN KEY (PRIVILEGE_ID) REFERENCES PRIVILEGE (PRIVILEGE_ID)
);

CREATE TABLE USERS
(
    USER_ID      INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USERNAME     VARCHAR2(30) NOT NULL,
    PASSWORD     VARCHAR2(30) NOT NULL,
    EMAIL        VARCHAR2(30) NOT NULL,
    FIRST_NAME   VARCHAR2(30),
    LAST_NAME    VARCHAR2(30),
    BIRTH_DATE   DATE,
    GENDER       VARCHAR2(5),
    PHONE_NUMBER VARCHAR2(30),
    ROLE_ID      INT          NOT NULL,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID)
);

CREATE TABLE REVIEWS
(
    REVIEW_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    CONTENT   VARCHAR2(30) NOT NULL,
    USER_ID   INT          NOT NULL,
    BOOK_ID   INT,
    AUTHOR_ID INT,
    FOREIGN KEY (BOOK_ID) REFERENCES BOOK (BOOK_ID),
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR (AUTHOR_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);

-- TABELE POMOCNICZE
CREATE TABLE AUTHOR_ARCHIVE
(
    AUTHOR_ID          INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    FIRST_NAME         VARCHAR2(30) NOT NULL,
    LAST_NAME          VARCHAR2(30) NOT NULL,
    RATING             INT,
    VOTES              INT,
    WEBSITE            VARCHAR2(30),
    ARCHIVIZATION_DATE DATE
);

CREATE TABLE BOOK_ARCHIVE
(
    BOOK_ID            INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    TITLE              VARCHAR2(50) NOT NULL,
    ISBN               VARCHAR2(30) NOT NULL,
    PAGE_COUNT         INT,
    LANGUAGE           VARCHAR2(10),
    PUBLISHER          VARCHAR2(30),
    PUBLISHING_DATE    DATE,
    RATING             INT,
    VOTES              INT,
    CATEGORY_ID        INT,
    ARCHIVIZATION_DATE DATE
);

CREATE TABLE USERS_ARCHIVE
(
    USER_ID            INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USERNAME           VARCHAR2(30) NOT NULL,
    PASSWORD           VARCHAR2(30) NOT NULL,
    EMAIL              VARCHAR2(30) NOT NULL,
    FIRST_NAME         VARCHAR2(30),
    LAST_NAME          VARCHAR2(30),
    BIRTH_DATE         DATE,
    GENDER             VARCHAR2(5),
    PHONE_NUMBER       VARCHAR2(30),
    ARCHIVIZATION_DATE DATE
);

CREATE TABLE LOGS
(
    LOGI_ID         INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    OPERATION_NAME  VARCHAR2(30),
    OPERATION_DATE  DATE,
    OPERATION_TABLE VARCHAR2(30)
);

-- 2. ŁADOWANIE DO BAZY PRZYKŁADOWYCH DANYCH
INSERT INTO CATEGORY (NAME)
VALUES ('Literatura piekna');
INSERT INTO CATEGORY (NAME)
VALUES ('Nauka jezykow');
INSERT INTO CATEGORY (NAME)
VALUES ('Fantastyka');
INSERT INTO CATEGORY (NAME)
VALUES ('Kulinaria');
INSERT INTO CATEGORY (NAME)
VALUES ('Komiks');
INSERT INTO CATEGORY (NAME)
VALUES ('Literatura Popularno - naukowa');

INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Bianka', 'Lipinska', 6.7, 2002, 'www.bianka-lipinska.com', 1);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Manuela', 'Gretkowska', 5.4, 302, 'www.manuela-gretkowska.com', 1);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Margaret', 'Atwood', 5.2, 315, 'www.margaret-atwood.com', 1);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Adam', 'Urban', 8.5, 229, 'www.adam-urban.com', 2);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Magdalena', 'Filak', 5.6, 191, 'www.magdalena-filak.com', 2);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('J.R.R', 'Tolkien', 8.3, 12541, 'www.tolkien.com', 3);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Andrzej', 'Sapkowski', 7.9, 9100, 'www.sapkowski.com', 3);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Marta', 'Dymek', 9.3, 6351, 'www.marta-dymek.com', 4);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Robert', 'Maklowicz', 9.9, 13561, 'www.robert-maklowicz.com', 4);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Henryk', 'Chmielewski', 7.3, 2403, 'www.henryk-chmielewski.com', 5);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Yuval', 'Harari', 7.6, 5352, 'www.yuval-harari.com', 6);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Sarah', 'Frier', 6.8, 1333, 'www.sarah-frier.com', 6);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Nassim', 'Taleb', 7.3, 515, 'www.nassim-taleb.com', 6);
INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
VALUES ('Michal', 'Wojtas', 9.4, 24615, 'www.michal-wojtas.com', 6);


INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Ten dzień', '9788381179140', 172, 'Polski', 'Edipresse', '20201019', 4.5, 55, 1, 1);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Faworyty', ' 9788324071128', 320, 'Polski', 'Znak', '20200513', 4.2, 18, 1, 2);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Testamenty', ' 9788380324305', 464, 'Polski', 'Wielka Litera', '20200324', 5.3, 1450, 1, 3);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Opowieśc o angielskich czasach', ' 9788366384637', 188, 'Polski', 'Preston', '20210609', 8.7, 4618, 2,
        4);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Angielski w tlumaczeniach. Bussiness 1', ' 9788366384620', 168, 'Polski', 'Preston', '20210609', 4.3, 130, 2, 5);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Angielski w tlumaczeniach. Bussiness 2', ' 9788366384651', 168, 'Polski', 'Preston', '20210609', 7.6, 143, 2, 5);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Hobbit', '9788381162647', 304, 'Polski', 'Zysk i S-ka', '20180212', 8.5, 7652, 3, 6);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Ostatnie życzenie', '9788375780635', 332, 'Polski', 'superNOWA', '20141101', 8.7, 18201, 3, 7);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Krew Elfów', '9788375780659', 340, 'Polski', 'superNOWA', '20141028', 9.1, 13101, 3, 7);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Jadlonomia po polsku', ' 9788366335875', 280, 'Polski', 'Marginesy', '20200702', 9.2, 9432, 4, 8);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Dalmacja ksiazka kucharska', '9788396010742', 200, 'Polski', 'Wysoki Zamek', '20210617', 8.7, 190201, 4, 9);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Tytus Romek i atomek', ' 9788381230827', 1536, 'Polski', 'Prószyński i S-ka', '20210305', 5.3, 13561, 5, 10);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('100 na 100 Analogia komiksu', ' 9788302180446', 233, 'Polski', 'WSiP', '20181002', 7.6, 2345, 5, 10);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Tytus sie zeni', ' 9788381230292', 48 , 'Polski', 'Prószyński i S-ka', '20170719', 5.6, 1447, 5, 10);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Sapiens od zwierzat do bogow', ' 9788308068144', 544, 'Polski', 'Literackie', '20201210', 5.3, 143, 5, 11);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Instagram bez filtra', ' 9788382250008', 360, 'Polski', 'Feeria', '20201125', 5.7, 134, 5, 12);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Czarny Labedz', ' 9788382020144', 698, 'Polski', 'Zysk i s-ka', '20200429', 6.6, 253, 5, 13);
INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID, AUTHOR_ID)
VALUES ('Cyberpunk 1982-2020', '9788324056705', 320, 'Polski', 'Znak', '20200416', 7.9, 15432, 5, 14);


INSERT INTO ROLE (NAME)
VALUES ('ADMIN');
INSERT INTO ROLE (NAME)
VALUES ('USER');

INSERT INTO PRIVILEGE (NAME, DESCRIPTION)
VALUES ('SUPERPOWER', 'Can do anything');
INSERT INTO PRIVILEGE (NAME, DESCRIPTION)
VALUES ('NO_POWER', 'Can''t do nothing');

INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID)
VALUES (1, 1);
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID)
VALUES (2, 2);

INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
VALUES ('brzosti', 'brzosti', 'pinbrzostek7@gmail.com', 'Patryk', 'Brzostek', '19961216', 'M', '+48-123-123-123',
        1);
INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
VALUES ('testowy_user', 'user', 'user@gmail.com', 'User', 'Name', '19901210', 'M', '+48-321-321-321', 2);
INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
VALUES ('testowy_admin', 'admin', 'admin@gmail.com', 'Admin', 'Admin', '20110506', 'M', '+48-432-432-432', 1);


-- 3. PROCEDURY, FUNKCJE, WYZWALACZE OBSLUGUJACE BAZE

-- A. DODAWANIE REKORDOW
CREATE OR REPLACE PROCEDURE ADD_AUTHOR(V_FIRST_NAME VARCHAR2,
                                       V_LAST_NAME VARCHAR2,
                                       V_RATING INT DEFAULT 0,
                                       V_VOTES INT DEFAULT 0,
                                       V_WEBSITE VARCHAR2 DEFAULT 'www.example.com',
                                       V_CATEGORY_ID INT DEFAULT NULL)
    IS
BEGIN
    INSERT INTO AUTHOR (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, CATEGORY_ID)
    VALUES (V_FIRST_NAME, V_LAST_NAME, V_RATING, V_VOTES, V_WEBSITE, V_CATEGORY_ID);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE ADD_BOOK(V_TITLE VARCHAR2,
                                     V_ISBN VARCHAR2,
                                     V_PAGE_COUNT INT DEFAULT 0,
                                     V_LANGUAGE VARCHAR2 DEFAULT 'Polski',
                                     V_PUBLISHER VARCHAR2 DEFAULT 'No publisher',
                                     V_PUBLISHING_DATE DATE DEFAULT CURRENT_DATE,
                                     V_RATING INT DEFAULT 0,
                                     V_VOTES INT DEFAULT 0,
                                     V_CATEGORY_ID INT DEFAULT NULL,
                                     V_AUTHOR_ID INT DEFAULT NULL)
    IS
BEGIN
    INSERT INTO BOOK (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID,
                      AUTHOR_ID)
    VALUES (V_TITLE, V_ISBN, V_PAGE_COUNT, V_LANGUAGE, V_PUBLISHER, V_PUBLISHING_DATE, V_RATING, V_VOTES, V_CATEGORY_ID,
            V_AUTHOR_ID);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE ADD_CATEGORY(
    V_NAME VARCHAR2)
    IS
BEGIN
    INSERT INTO CATEGORY (NAME)
    VALUES (V_NAME);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE ADD_USER(V_USERNAME VARCHAR2,
                                     V_PASSWORD VARCHAR2,
                                     V_EMAIL VARCHAR2,
                                     V_FIRST_NAME VARCHAR2 DEFAULT '',
                                     V_LAST_NAME VARCHAR2 DEFAULT '',
                                     V_BIRTH_DATE DATE DEFAULT CURRENT_DATE,
                                     V_GENDER VARCHAR2 DEFAULT '',
                                     V_PHONE_NUMBER VARCHAR2 DEFAULT '',
                                     V_ROLE_ID INT DEFAULT NULL)
    IS
BEGIN
    INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
    VALUES (V_USERNAME, V_PASSWORD, V_EMAIL, V_FIRST_NAME, V_LAST_NAME, V_BIRTH_DATE, V_GENDER, V_PHONE_NUMBER,
            V_ROLE_ID);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

-- A. AKTUALIZACJA REKORDOW
CREATE OR REPLACE PROCEDURE UPDATE_AUTHOR_NAMES(V_AUTHOR_ID INT,
                                                V_FIRST_NAME VARCHAR2)
    IS
    NO_JOBS_UPDATED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_JOBS_UPDATED, -2001);
BEGIN
    UPDATE AUTHOR SET FIRST_NAME = V_FIRST_NAME WHERE AUTHOR_ID = V_AUTHOR_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie udalo sie zaktualizowac zadnych danych');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE UPDATE_BOOK_TITLE(V_BOOK_ID INT,
                                              V_TITLE VARCHAR2)
    IS
    NO_JOBS_UPDATED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_JOBS_UPDATED, -2001);
BEGIN
    UPDATE BOOK SET TITLE = V_TITLE WHERE BOOK_ID = V_BOOK_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie udalo sie zaktualizowac zadnych danych');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE UPDATE_USER_PASSWORD(V_USER_ID INT,
                                                 V_NEW_PASSWORD VARCHAR2)
    IS
    NO_JOBS_UPDATED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_JOBS_UPDATED, -2001);
BEGIN
    UPDATE USERS SET PASSWORD = V_NEW_PASSWORD WHERE USER_ID = V_USER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie udalo sie zaktualizowac zadnych danych');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

-- A. USUWANIE REKORDOW
CREATE OR REPLACE PROCEDURE DELETE_AUTHOR(V_AUTHOR_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM AUTHOR WHERE AUTHOR_ID = V_AUTHOR_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie usunieto żadnych danych');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE DELETE_BOOK(V_BOOK_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM BOOK WHERE BOOK_ID = V_BOOK_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie usunieto żadnych danych');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE DELETE_USER(V_USER_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM USERS WHERE USER_ID = V_USER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie usunieto żadnych danych');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

-- B. ARCHIWIZACJA USUNIETYCH DANYCH
CREATE OR REPLACE TRIGGER ARCHIVE_BOOK
    BEFORE DELETE
    ON BOOK
    FOR EACH ROW
BEGIN
    INSERT INTO BOOK_ARCHIVE (TITLE, ISBN, PAGE_COUNT, LANGUAGE, PUBLISHER, PUBLISHING_DATE, RATING, VOTES, CATEGORY_ID,
                              ARCHIVIZATION_DATE)
    VALUES (:OLD.TITLE, :OLD.ISBN, :OLD.PAGE_COUNT, :OLD.LANGUAGE, :OLD.PUBLISHER, :OLD.PUBLISHING_DATE, :OLD.RATING,
            :OLD.VOTES, :OLD.CATEGORY_ID, CURRENT_DATE);
END;

CREATE OR REPLACE TRIGGER ARCHIVE_AUTHOR
    BEFORE DELETE
    ON AUTHOR
    FOR EACH ROW
BEGIN
    INSERT INTO AUTHOR_ARCHIVE (FIRST_NAME, LAST_NAME, RATING, VOTES, WEBSITE, ARCHIVIZATION_DATE)
    VALUES (:OLD.FIRST_NAME, :OLD.LAST_NAME, :OLD.RATING, :OLD.VOTES, :OLD.WEBSITE, CURRENT_DATE);
END;

CREATE OR REPLACE TRIGGER ARCHIVE_USER
    BEFORE DELETE
    ON USERS
    FOR EACH ROW
BEGIN
    INSERT INTO USERS_ARCHIVE (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER,
                               ARCHIVIZATION_DATE)
    VALUES (:OLD.USER_ID, :OLD.PASSWORD, :OLD.EMAIL, :OLD.FIRST_NAME, :OLD.LAST_NAME, :OLD.BIRTH_DATE, :OLD.GENDER,
            :OLD.PHONE_NUMBER, CURRENT_DATE);
END;

-- C. LOGOWANIE INFORMACJI DO TABELI

CREATE OR REPLACE TRIGGER LOG_BOOK_DELETE
    AFTER DELETE
    ON BOOK
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE', CURRENT_DATE, 'BOOK');
END;

CREATE OR REPLACE TRIGGER LOG_BOOK_INSERT
    AFTER INSERT
    ON BOOK
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT', CURRENT_DATE, 'BOOK');
END;

CREATE OR REPLACE TRIGGER LOG_BOOK_UPDATE
    AFTER UPDATE
    ON BOOK
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE', CURRENT_DATE, 'BOOK');
END;

CREATE OR REPLACE TRIGGER LOG_AUTHOR_DELETE
    AFTER DELETE
    ON AUTHOR
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE', CURRENT_DATE, 'AUTHOR');
END;

CREATE OR REPLACE TRIGGER LOG_AUTHOR_INSERT
    AFTER INSERT
    ON AUTHOR
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT', CURRENT_DATE, 'AUTHOR');
END;

CREATE OR REPLACE TRIGGER LOG_AUTHOR_UPDATE
    AFTER UPDATE
    ON AUTHOR
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE', CURRENT_DATE, 'AUTHOR');
END;

CREATE OR REPLACE TRIGGER LOG_USER_DELETE
    AFTER DELETE
    ON USERS
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE', CURRENT_DATE, 'USERS');
END;

CREATE OR REPLACE TRIGGER LOG_USER_INSERT
    AFTER INSERT
    ON USERS
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT', CURRENT_DATE, 'USERS');
END;

CREATE OR REPLACE TRIGGER LOG_USER_UPDATE
    AFTER UPDATE
    ON USERS
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE', CURRENT_DATE, 'USERS');
END;

-- D. OBSŁUGA WYJĄTKÓW (ROWNIEZ WLASNE WYJATKI)

--- Zostało zrealizowane w procedurach w punkcje A

-- E. PROCEDURY, FUNKCJE Z PARAMETRAMI, MOZLIWE PARAMETRY DOMYSLNE
CREATE OR REPLACE PROCEDURE GET_USER_FIRST_AND_LAST_NAME_BY_USERNAME(V_USERNAME IN VARCHAR2,
                                                                     OUT_FIRST_NAME OUT VARCHAR2,
                                                                     OUT_LAST_NAME OUT VARCHAR2)
    IS
    TYPE ROW_TYPE IS RECORD
                     (
                         FIRST_NAME VARCHAR2(30),
                         LAST_NAME  VARCHAR2(30)
                     );
    ROW_RESULT ROW_TYPE;
    CUR        SYS_REFCURSOR;

BEGIN
    OPEN CUR FOR 'SELECT LAST_NAME, FIRST_NAME FROM USERS WHERE USERNAME = ' || V_USERNAME;
    FETCH CUR INTO ROW_RESULT;
    OUT_FIRST_NAME := ROW_RESULT.FIRST_NAME;
    OUT_LAST_NAME := ROW_RESULT.LAST_NAME;
END;
/

-- F. FUNKCJE SPRAWDZAJACE POPRAWNOSC DANYCH

CREATE OR REPLACE FUNCTION IS_VALID_EMAIL(V_EMAIL VARCHAR2) RETURN BOOLEAN IS
BEGIN
    IF V_EMAIL NOT LIKE '_%@__%.__%' THEN
        RETURN FALSE;
    ELSE
        RETURN TRUE;
    END IF;
END;


-- 4. RAPORTY RECENZJI
DROP TABLE USERS_REVIEWS CASCADE CONSTRAINTS;
CREATE TABLE USERS_REVIEWS
(
    USERS_REVIEWS_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USERNAME         VARCHAR2(30),
    REVIEWS_COUNT    INT
)

CREATE OR REPLACE PROCEDURE GENERATE_REPORT
    IS
    USER_USERNAME VARCHAR2(30);
    USER_REVIEWS  INT;
    CUR           SYS_REFCURSOR;
BEGIN
    OPEN CUR FOR 'SELECT USERNAME FROM USERS';
    LOOP
        FETCH CUR INTO USER_USERNAME;
        EXIT WHEN CUR%NOTFOUND;
        SELECT COUNT(*)
        INTO USER_REVIEWS
        FROM REVIEWS
                 JOIN USERS U on REVIEWS.USER_ID = U.USER_ID
        WHERE U.USERNAME = USER_USERNAME;

        INSERT INTO USERS_REVIEWS (USERNAME, REVIEWS_COUNT)
        VALUES (USER_USERNAME, USER_REVIEWS);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('WLASNIE ZOSTAL WYGENEROWANY NOWY RAPORT');
END;

CREATE OR REPLACE VIEW VIEW_MOST_ACTIVE_USERS
AS
SELECT *
FROM USERS_REVIEWS
ORDER BY REVIEWS_COUNT DESC;
