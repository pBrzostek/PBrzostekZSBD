-- USUWANIE POZOSTAŁOŚCI PO POPRZEDNIM WYKONANIU
DROP TABLE ROLE_PRIVILEGE CASCADE CONSTRAINTS;
DROP TABLE PRIVILEGE CASCADE CONSTRAINTS;
DROP TABLE USERS CASCADE CONSTRAINTS;
DROP TABLE PRODUCT CASCADE CONSTRAINTS;
DROP TABLE ROLE CASCADE CONSTRAINTS;
DROP TABLE REVIEWS CASCADE CONSTRAINTS;
DROP TABLE MANUFACTURER CASCADE CONSTRAINTS;
DROP TABLE SUPPLIER CASCADE CONSTRAINTS;
DROP TABLE PRODUCT_CATEGORY CASCADE CONSTRAINTS;
DROP TABLE USERS_ARCHIVE CASCADE CONSTRAINTS;
DROP TABLE BOOK_ARCHIVE CASCADE CONSTRAINTS;
DROP TABLE AUTHOR_ARCHIVE CASCADE CONSTRAINTS;
DROP TABLE LOGS CASCADE CONSTRAINTS;

-- 1. PRZYGOTOWANIE ODPOWIEDNIEJ STRUKTURY BAZY DANYCH NA WYBRANY TEMAT
-- TABELE GLOWNE
CREATE TABLE PRODUCT_CATEGORY
(
    PRODUCT_CATEGORY_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NAME        VARCHAR2(30) NOT NULL
);


CREATE TABLE MANUFACTURER
(
    MANUFACTURER_ID   INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    MANUFACTURER_NAME  VARCHAR2(30) NOT NULL,
    RATING      INT,
    VOTES       INT,
    WEBSITE     VARCHAR2(30),
    PRODUCT_CATEGORY_ID INT,
    FOREIGN KEY (PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_ID)
);


CREATE TABLE PRODUCT
(
    PRODUCT_ID  INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(50) NOT NULL,
    EAN_14 VARCHAR2(14) NOT NULL,
    QUANTITY_IN_PACKAGE INT,
    LAST_ORDER_DATE DATE,
    NEXT_ORDER_DATE DATE,
    PRODUCT_CATEGORY_ID INT,
    MANUFACTURER_ID INT,
    SUPPLIER_ID INT,
    FOREIGN KEY (PRODUCT_CATEGORY_ID) REFERENCES PRODUCT_CATEGORY (PRODUCT_CATEGORY_ID),
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER (SUPPLIER_ID),
    FOREIGN KEY (MANUFACTURER_ID REFERENCES MANFUACTURER (MANUFACTURER_ID)
);

CREATE TABLE SUPPLIER
(
	SUPPLIER_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    SUPPLIER_NAME VARCHAR2(50) NOT NULL,
    DELIVERY_PRICE INT
);

CREATE TABLE ROLE
(
    ROLE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NAME    VARCHAR2(30) NOT NULL
);

CREATE TABLE PRIVILEGE
(
    PRIVILEGE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NAME         VARCHAR2(30) NOT NULL,
    DESCRIPTION  VARCHAR2(30) NOT NULL
);

CREATE TABLE ROLE_PRIVILEGE
(
    ROLE_PRIVILEGE_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    ROLE_ID           INT,
    PRIVILEGE_ID      INT,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID),
    FOREIGN KEY (PRIVILEGE_ID) REFERENCES PRIVILEGE (PRIVILEGE_ID)
);

CREATE TABLE USERS
(
    USER_ID      INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USERNAME     VARCHAR2(30) NOT NULL,
    PASSWORD     VARCHAR2(30) NOT NULL,
    EMAIL        VARCHAR2(30) NOT NULL,
    FIRST_NAME   VARCHAR2(30),
    LAST_NAME    VARCHAR2(30),
    BIRTH_DATE   DATE,
    GENDER       VARCHAR2(5),
    PHONE_NUMBER VARCHAR2(30),
    ROLE_ID      INT          NOT NULL,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID)
);

CREATE TABLE REVIEWS
(
    REVIEW_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    CONTENT   VARCHAR2(30) NOT NULL,
    USER_ID   INT          NOT NULL,
    PRODUCT_ID   INT,
    MANUFACTURER_ID INT,
    SUPPLIER_ID INT,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID),
    FOREIGN KEY (MANUFACTURER_ID) REFERENCES MANUFACTURER (MANUFACTURER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
	FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER (SUPPLIER_ID),
);

-- TABELE POMOCNICZE
CREATE TABLE MANUFACTURER_ARCHIVE
(
	MANUFACTURER_ID   INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    MANUFACTURER_NAME  VARCHAR2(30) NOT NULL,
    RATING      INT,
    VOTES       INT,
    WEBSITE     VARCHAR2(30),
	ARCHIVIZATION_DATE DATE
);

CREATE TABLE PRODUCT_ARCHIVE
(
	PRODUCT_ID  INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(50) NOT NULL,
    EAN_14 VARCHAR2(14) NOT NULL,
    QUANTITY_IN_PACKAGE INT,
    LAST_ORDER_DATE DATE,
    NEXT_ORDER_DATE DATE,
    PRODUCT_CATEGORY_ID INT,
    MANUFACTURER_ID INT,
    SUPPLIER_ID INT,
    ARCHIVIZATION_DATE DATE
);

CREATE TABLE SUPPLIER_ARCHIVE
(
	SUPPLIER_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    SUPPLIER_NAME VARCHAR(50) NOT NULL,
    DELIVERY_PRICE INT,
    ARCHIVIZATION_DATE DATE
)

CREATE TABLE USERS_ARCHIVE
(
    USER_ID            INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USERNAME           VARCHAR2(30) NOT NULL,
    PASSWORD           VARCHAR2(30) NOT NULL,
    EMAIL              VARCHAR2(30) NOT NULL,
    FIRST_NAME         VARCHAR2(30),
    LAST_NAME          VARCHAR2(30),
    BIRTH_DATE         DATE,
    GENDER             VARCHAR2(5),
    PHONE_NUMBER       VARCHAR2(30),
    ARCHIVIZATION_DATE DATE
);


CREATE TABLE LOGS
(
    LOGI_ID         INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    OPERATION_NAME  VARCHAR2(30),
    OPERATION_DATE  DATE,
    OPERATION_TABLE VARCHAR2(30)
);

-- 2. ŁADOWANIE DO BAZY PRZYKŁADOWYCH DANYCH
INSERT INTO PRODUCT_CATEGORY (NAME)
VALUES ('MYSZKI I KLAWIATURY');
INSERT INTO PRODUCT_CATEGORY (NAME)
VALUES ('SLUCHAWKI');
INSERT INTO PRODUCT_CATEGORY (NAME)
VALUES ('ODKURZACZ');
INSERT INTO PRODUCT_CATEGORY (NAME)
VALUES ('EKRANY');
INSERT INTO PRODUCT_CATEGORY (NAME)
VALUES ('LAPTOPY');

INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('Razer',9,6,'12000','www.razer.com',1);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('LG',7,3,'1300','www.lg.com',1);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('HyperX',8,4,'12000','www.hyperX.com',2);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('PHILIPS',4,2,'12000','www.philips.com',3);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('Zelmer',6,7,'12000','www.zelmer.com',3);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('Beko',9,1,'12000','www.beko.com',3);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('Samsung',7,4,'12000','www.samsung.com',4);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('Sony',6,4,'12000','www.sony.com',4);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('HP',8,1,'12000','www.hp.com',5);
INSERT INTO MANUFACTURER(MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
VALUES ('Acer',9,5,'12000','www.acer.com',5);

INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('MYSZKA RAZER RGB', '12345678901234', '20200701','20210701',1,1,1);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('MYSZKA RAZER No-RGB', '12345678901243', '20201001','20211001',1,1,1);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Sluchawki LG', '12345678901134', '20181001','20210901',2,2,2);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Sluchawki HyperX', '22345678902134', '20191001','20211001',2,3,2);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Odkurzacz Zelmer', '33345678902134', '20191001','20211001',3,5,2);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Odkurzacz Philips', '13245678902134', '20191001','20211001',3,4,3);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Odkurzacz Beko', '12354678902134', '20191001','20211001',3,6,3);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Telewizor Samsung OLED', '12357778902134', '20191001','20211001',4,7,4);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Telewizor Samsung QLED', '12354678882134', '20191001','20211001',4,7,4);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Telewizor Sony OLED', '12354678999134', '20191001','20211001',4,8,3);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Telewizor Sony QLED', '12355378902134', '20191001','20211001',4,8,3);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Laptop HP', '12222228999134', '20191001','20211001',5,9,5);
INSERT INTO PRODUCT(PRODUCT_NAME ,EAN_14,QUANTITY_IN_PACKAGE,LAST_ORDER_DATE,NEXT_ORDER_DATE,PRODUCT_CATEGORY_ID,MANUFACTURER_ID,SUPPLIER_ID)
VALUES ('Laptop Acer', '12333333902134', '20191001','20211001',5,10,5);


INSERT INTO SUPPLIER (SUPPLIER_NAME,DELIVERY_PRICE)
VALUES ('DPD','15')
INSERT INTO SUPPLIER (SUPPLIER_NAME,DELIVERY_PRICE)
VALUES ('DHL','12')
INSERT INTO SUPPLIER (SUPPLIER_NAME,DELIVERY_PRICE)
VALUES ('FEEDEX','8')
INSERT INTO SUPPLIER (SUPPLIER_NAME,DELIVERY_PRICE)
VALUES ('AMAZON','1')
INSERT INTO SUPPLIER (SUPPLIER_NAME,DELIVERY_PRICE)
VALUES ('APACZKA','5')


INSERT INTO ROLE (NAME)
VALUES ('ADMIN');
INSERT INTO ROLE (NAME)
VALUES ('USER');

INSERT INTO PRIVILEGE (NAME, DESCRIPTION)
VALUES ('SUPERMAN', 'Can do anything');
INSERT INTO PRIVILEGE (NAME, DESCRIPTION)
VALUES ('UNSUPERMAN', 'Can''t do nothing');

INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID)
VALUES (1, 1);
INSERT INTO ROLE_PRIVILEGE (ROLE_ID, PRIVILEGE_ID)
VALUES (2, 2);

INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
VALUES ('brzosti', 'brzosti', 'pinbrzostek7@gmail.com', 'Patryk', 'Brzostek', '19961216', 'M', '+48-123-123-123',
        1);
INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
VALUES ('testowy_user', 'user', 'user@gmail.com', 'User', 'Name', '19901210', 'M', '+48-321-321-321', 2);
INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
VALUES ('testowy_admin', 'admin', 'admin@gmail.com', 'Admin', 'Admin', '20110506', 'M', '+48-432-432-432', 1);


-- 3. PROCEDURY, FUNKCJE, WYZWALACZE OBSLUGUJACE BAZE

-- A. DODAWANIE REKORDOW
CREATE OR REPLACE PROCEDURE ADD_MANUFACTURER(V_MANUFACTURER_NAME VARCHAR2,
											 V_RATING INT DEFAULT 0,
											 V_VOTES INT DEFAULT 0,
											 V_WEBSITE VARCHAR2 DEFAULT 'www.example.com',
											 V_PRODUCT_CATEGORY_ID INT DEFAULT NULL)
    IS
BEGIN
    INSERT INTO MANUFACTURER (MANUFACTURER_NAME, RATING, VOTES, WEBSITE, PRODUCT_CATEGORY_ID)
    VALUES (V_MANUFACTURER_NAME, V_RATING, V_VOTES, V_WEBSITE, V_PRODUCT_CATEGORY_ID);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE ADD_PRODUCT(V_PRODUCT_NAME VARCHAR2,
										V_EAN_14 VARCHAR2,
										V_QUANTITY_IN_PACKAGE INT DEFAULT NULL,
										V_LAST_ORDER_DATE DATE DEFAULT NULL,
										V_NEXT_ORDER_DATE DATE DEFAULT CURRENT_DATE,
										V_PRODUCT_CATEGORY_ID INT DEFAULT NULL,
										V_MANUFACTURER_ID INT DEFAULT NULL,
										V_SUPPLIER_ID INT DEFAULT NULL)
    IS
BEGIN
    INSERT INTO BOOK (PRODUCT_NAME, EAN_14, QUANTITY_IN_PACKAGE, LAST_ORDER_DATE, NEXT_ORDER_DATE, PRODUCT_CATEGORY_ID, MANUFACTURER_ID, SUPPLIER_ID)
    VALUES (V_PRODUCT_NAME, V_EAN_14, V_QUANTITY_IN_PACKAGE, V_LAST_ORDER_DATE, V_NEXT_ORDER_DATE, V_PRODUCT_CATEGORY_ID, V_MANUFACTURER_ID, V_SUPPLIER_ID));

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE ADD_SUPPLIER(V_SUPPLIER_NAME VARCHAR2,
										 V_DELIVERY_PRICE DEFAULT INT 0)
    IS
BEGIN
    INSERT INTO BOOK (SUPPLIER_NAME, DELIVERY_PRICE)
    VALUES (V_SUPPLIER_NAME, V_DELIVERY_PRICE);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE ADD_PRODUCT_CATEGORY(
    V_NAME VARCHAR2)
    IS
BEGIN
    INSERT INTO PRODUCT_CATEGORY (NAME)
    VALUES (V_NAME);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE ADD_USER(V_USERNAME VARCHAR2,
                                     V_PASSWORD VARCHAR2,
                                     V_EMAIL VARCHAR2,
                                     V_FIRST_NAME VARCHAR2 DEFAULT '',
                                     V_LAST_NAME VARCHAR2 DEFAULT '',
                                     V_BIRTH_DATE DATE DEFAULT CURRENT_DATE,
                                     V_GENDER VARCHAR2 DEFAULT '',
                                     V_PHONE_NUMBER VARCHAR2 DEFAULT '',
                                     V_ROLE_ID INT DEFAULT NULL)
    IS
BEGIN
    INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER, ROLE_ID)
    VALUES (V_USERNAME, V_PASSWORD, V_EMAIL, V_FIRST_NAME, V_LAST_NAME, V_BIRTH_DATE, V_GENDER, V_PHONE_NUMBER,
            V_ROLE_ID);

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

-- A. AKTUALIZACJA REKORDOW
CREATE OR REPLACE PROCEDURE UPDATE_MANUFACTURER_NAMES(V_MANUFACTURER_ID INT,
                                                      V_MANUFACTURER_NAME VARCHAR2)
    IS
    NO_JOBS_UPDATED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_JOBS_UPDATED, -2001);
BEGIN
    UPDATE MANUFACTURER SET MANUFACTURER_NAME = V_MANUFACTURER_NAME WHERE MANUFACTURER_ID = V_MANUFACTURER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie udalo sie zaktualizowac zadnych danych');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE UPDATE_PRODUCT_NAME(V_PRODUCT_ID INT,
                                              V_PRODUCT_NAME VARCHAR2)
    IS
    NO_JOBS_UPDATED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_JOBS_UPDATED, -2001);
BEGIN
    UPDATE PRODUCT SET PRODUCT_NAME = V_PRODUCT_NAME WHERE PRODUCT_ID = V_PRODUCT_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie udalo sie zaktualizowac zadnych danych');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE UPDATE_SUPPLIER_NAME(V_SUPPLIER_ID INT,
                                              V_SUPPLIER_NAME VARCHAR2)
    IS
    NO_JOBS_UPDATED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_JOBS_UPDATED, -2001);
BEGIN
    UPDATE SUPPLIER SET SUPPLIER_NAME = V_SUPPLIER_NAME WHERE SUPPLIER_ID = V_SUPPLIER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie udalo sie zaktualizowac zadnych danych');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE UPDATE_USER_PASSWORD(V_USER_ID INT,
                                                 V_NEW_PASSWORD VARCHAR2)
    IS
    NO_JOBS_UPDATED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_JOBS_UPDATED, -2001);
BEGIN
    UPDATE USERS SET PASSWORD = V_NEW_PASSWORD WHERE USER_ID = V_USER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie udalo sie zaktualizowac zadnych danych');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

-- A. USUWANIE REKORDOW
CREATE OR REPLACE PROCEDURE DELETE_MANUFACTURER(V_MANUFACTURER_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM MANUFACTURER WHERE MANUFACTURER_ID = V_MANUFACTURER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie usunieto żadnych danych');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE DELETE_PRODUCT(V_PRODUCT_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM PRODUCT WHERE PRODUCT_ID = V_PRODUCT_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie usunieto żadnych danych');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE DELETE_SUPPLIER(V_SUPPLIER_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM SUPPLIER WHERE SUPPLIER_ID = V_SUPPLIER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie usunieto żadnych danych');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE DELETE_USER(V_USER_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM USERS WHERE USER_ID = V_USER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nie usunieto żadnych danych');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Podano złe dane wejsciowe');
        DBMS_OUTPUT.PUT_LINE('Kod błedu: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Komunikat: ' || SQLERRM);
END;

-- B. ARCHIWIZACJA USUNIETYCH DANYCH
CREATE OR REPLACE TRIGGER ARCHIVE_PRODUCT
    BEFORE DELETE
    ON PRODUCT
    FOR EACH ROW
BEGIN
    INSERT INTO PRODUCT_ARCHIVE (PRODUCT_NAME, EAN_14, QUANTITY_IN_PACKAGE, LAST_ORDER_DATE, NEXT_ORDER_DATE, PRODUCT_CATEGORY_ID, MANUFACTURER_ID, SUPPLIER_ID,
                              ARCHIVIZATION_DATE)
    VALUES (:OLD.PRODUCT_NAME, :OLD.EAN_14, :OLD.QUANTITY_IN_PACKAGE, :OLD.LAST_ORDER_DATE, :OLD.NEXT_ORDER_DATE, :OLD.PRODUCT_CATEGORY_ID, :OLD.MANUFACTURER_ID, :OLD.SUPPLIER_ID, CURRENT_DATE);
END;

CREATE OR REPLACE TRIGGER ARCHIVE_MANUFACTURER
    BEFORE DELETE
    ON MANUFACTURER
    FOR EACH ROW
BEGIN
    INSERT INTO MANUFACTURER_ARCHIVE (MANUFACTURER_NAME, RATING, VOTES, WEBSITE, ARCHIVIZATION_DATE)
    VALUES (:OLD.MANUFACTURER_NAME, :OLD.RATING, :OLD.VOTES, :OLD.WEBSITE, :OLD.PRODUCT_CATEGORY_ID, CURRENT_DATE);
END;

CREATE OR REPLACE TRIGGER ARCHIVE_SUPPLIER
    BEFORE DELETE
    ON SUPPLIER
    FOR EACH ROW
BEGIN
    INSERT INTO SUPPLIER_ARCHIVE (SUPPLIER_NAME, DELIVERY_PRICE, ARCHIVIZATION_DATE)
    VALUES (:OLD.SUPPLIER_NAME, :OLD.DELIVERY_PRICE, CURRENT_DATE);
END;

CREATE OR REPLACE TRIGGER ARCHIVE_USER
    BEFORE DELETE
    ON USERS
    FOR EACH ROW
BEGIN
    INSERT INTO USERS_ARCHIVE (USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, BIRTH_DATE, GENDER, PHONE_NUMBER,
                               ARCHIVIZATION_DATE)
    VALUES (:OLD.USER_ID, :OLD.PASSWORD, :OLD.EMAIL, :OLD.FIRST_NAME, :OLD.LAST_NAME, :OLD.BIRTH_DATE, :OLD.GENDER,
            :OLD.PHONE_NUMBER, CURRENT_DATE);
END;

-- C. LOGOWANIE INFORMACJI DO TABELI

CREATE OR REPLACE TRIGGER LOG_PRUDCT_DELETE
    AFTER DELETE
    ON PRODUCT
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE', CURRENT_DATE, 'PRODUCT');
END;

CREATE OR REPLACE TRIGGER LOG_PRODUCT_INSERT
    AFTER INSERT
    ON PRODUCT
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT', CURRENT_DATE, 'PRODUCT');
END;

CREATE OR REPLACE TRIGGER LOG_PRODUCT_UPDATE
    AFTER UPDATE
    ON PRODUCT
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE', CURRENT_DATE, 'PRODUCT');
END;

CREATE OR REPLACE TRIGGER LOG_MANUFACTURER_DELETE
    AFTER DELETE
    ON MANUFACTURER
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE', CURRENT_DATE, 'MANUFACTURER');
END;

CREATE OR REPLACE TRIGGER LOG_MANUFACTURER_INSERT
    AFTER INSERT
    ON MANUFACTURER
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT', CURRENT_DATE, 'MANUFACTURER');
END;

CREATE OR REPLACE TRIGGER LOG_MANUFACTURER_UPDATE
    AFTER UPDATE
    ON MANUFACTURER
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE', CURRENT_DATE, 'MANUFACTURER');
END;

CREATE OR REPLACE TRIGGER LOG_SUPPLIER_DELETE
    AFTER DELETE
    ON SUPPLIER
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE', CURRENT_DATE, 'SUPPLIER');
END;

CREATE OR REPLACE TRIGGER LOG_SUPPLIER_INSERT
    AFTER INSERT
    ON SUPPLIER
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT', CURRENT_DATE, 'SUPPLIER');
END;

CREATE OR REPLACE TRIGGER LOG_SUPPLIER_UPDATE
    AFTER UPDATE
    ON SUPPLIER
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE', CURRENT_DATE, 'SUPPLIER');
END;

CREATE OR REPLACE TRIGGER LOG_USER_DELETE
    AFTER DELETE
    ON USERS
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE', CURRENT_DATE, 'USERS');
END;

CREATE OR REPLACE TRIGGER LOG_USER_INSERT
    AFTER INSERT
    ON USERS
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT', CURRENT_DATE, 'USERS');
END;

CREATE OR REPLACE TRIGGER LOG_USER_UPDATE
    AFTER UPDATE
    ON USERS
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE', CURRENT_DATE, 'USERS');
END;

-- D. OBSŁUGA WYJĄTKÓW (ROWNIEZ WLASNE WYJATKI)

--- Zostało zrealizowane w procedurach w punkcje A

-- E. PROCEDURY, FUNKCJE Z PARAMETRAMI, MOZLIWE PARAMETRY DOMYSLNE
CREATE OR REPLACE PROCEDURE GET_USER_FIRST_AND_LAST_NAME_BY_USERNAME(V_USERNAME IN VARCHAR2,
                                                                     OUT_FIRST_NAME OUT VARCHAR2,
                                                                     OUT_LAST_NAME OUT VARCHAR2)
    IS
    TYPE ROW_TYPE IS RECORD
                     (
                         FIRST_NAME VARCHAR2(30),
                         LAST_NAME  VARCHAR2(30)
                     );
    ROW_RESULT ROW_TYPE;
    CUR        SYS_REFCURSOR;

BEGIN
    OPEN CUR FOR 'SELECT LAST_NAME, FIRST_NAME FROM USERS WHERE USERNAME = ' || V_USERNAME;
    FETCH CUR INTO ROW_RESULT;
    OUT_FIRST_NAME := ROW_RESULT.FIRST_NAME;
    OUT_LAST_NAME := ROW_RESULT.LAST_NAME;
END;
/

-- F. FUNKCJE SPRAWDZAJACE POPRAWNOSC DANYCH

CREATE OR REPLACE FUNCTION IS_VALID_EMAIL(V_EMAIL VARCHAR2) RETURN BOOLEAN IS
BEGIN
    IF V_EMAIL NOT LIKE '_%@__%.__%' THEN
        RETURN FALSE;
    ELSE
        RETURN TRUE;
    END IF;
END;


-- 4. RAPORTY RECENZJI
DROP TABLE USERS_REVIEWS CASCADE CONSTRAINTS;
CREATE TABLE USERS_REVIEWS
(
    USERS_REVIEWS_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USERNAME         VARCHAR2(30),
    REVIEWS_COUNT    INT
)

CREATE OR REPLACE PROCEDURE GENERATE_REPORT
    IS
    USER_USERNAME VARCHAR2(30);
    USER_REVIEWS  INT;
    CUR           SYS_REFCURSOR;
BEGIN
    OPEN CUR FOR 'SELECT USERNAME FROM USERS';
    LOOP
        FETCH CUR INTO USER_USERNAME;
        EXIT WHEN CUR%NOTFOUND;
        SELECT COUNT(*)
        INTO USER_REVIEWS
        FROM REVIEWS
                 JOIN USERS U on REVIEWS.USER_ID = U.USER_ID
        WHERE U.USERNAME = USER_USERNAME;

        INSERT INTO USERS_REVIEWS (USERNAME, REVIEWS_COUNT)
        VALUES (USER_USERNAME, USER_REVIEWS);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('WLASNIE ZOSTAL WYGENEROWANY NOWY RAPORT');
END;

CREATE OR REPLACE VIEW VIEW_MOST_ACTIVE_USERS
AS
SELECT *
FROM USERS_REVIEWS
ORDER BY REVIEWS_COUNT DESC;
